{% extends "base_template.html.twig" %}

{% block content %}
    <div class="container py-5">
        <!-- Illustration -->
        <div class="row justify-content-center mb-4">
            <div class="col-12 col-md-8">
                <div class="d-flex justify-content-center align-items-center bg-light" style="height: 200px;">
                    {% if question.getCheminImage() %}
                        <img src="{{ question.getCheminImage() }}" alt="Illustration" style="max-height: 100%; max-width: 100%; object-fit: contain;">
                    {% else %}
                        <span class="text-secondary">Aucune image disponible</span>
                    {% endif %}
                </div>
            </div>
        </div>

        <!-- Question -->
        <div class="row justify-content-center">
            <div class="col-12 col-md-8">
                <div class="text-center bg-danger text-white py-2 rounded">
                    <h4>{{ question.getContenu() }}</h4>
                </div>
            </div>
        </div>
        
        <!-- Affichage du score -->
        <div class="row justify-content-center mt-2">
            <div class="col-12 col-md-8 text-center">
                <p class="score-info" style="color: red;">Score actuel : <strong>{{ score }} / {{ nbTotalQuestions }}</strong></p>
            </div>
        </div>
        
        <!-- difficulté -->
        <div class="row justify-content-center mb-2">
            <div class="col-12 col-md-8 text-center">
                {% set difficultyClass = '' %}
                
                {% if question.getNvDifficulte() == 'Facile' %}
                    {% set difficultyClass = 'text-success' %}
                {% elseif question.getNvDifficulte() == 'Moyen' %}
                    {% set difficultyClass = 'text-warning' %}
                {% elseif question.getNvDifficulte() == 'Difficile' %}
                    {% set difficultyClass = 'text-danger' %}
                {% endif %}
        
                <p class="{{ difficultyClass }}" style="margin-top: 0;">
                    Difficulté : <strong>{{ question.getNvDifficulte() }}</strong>
                </p>
            </div>
        </div>

        <!-- Réponses -->
        <div class="row justify-content-center">
            <div class="col-12 col-md-8">
                <div class="row">
                    {% for reponse in reponses %}
                        <div class="col-6 mb-3">
                            <button class="btn btn-light w-100 py-2 border border-primary response-button" data-correct="{{ reponse == question.getBonneReponse() ? 'true' : 'false' }}">
                                {{ reponse }}
                            </button>
                        </div>
                    {% endfor %}
                </div>
            </div>
        </div>

        <!-- Barre de progression -->
        <div class="row justify-content-center mb-3">
            <div class="col-12 col-md-8 text-center">
                <div class="progress">
                    <div id="progressBar" class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 0%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="{{ nbTotalQuestions }}"></div>
                </div>
            </div>
        </div>
        <div class="row justify-content-center mb-3">
            <div class="col-12 col-md-8 text-center">
                <div class="d-flex justify-content-center align-items-center">
                    <p style="font-size: 1.2rem; font-weight: bold; margin-right: 10px;">
                        Question {{ question.numero }} sur {{ nbTotalQuestions }} <button id="nextQuestionBtn" class="btn" style="display: none; font-size: 1.2rem; font-weight: bold;">
                            →
                        </button>
                    </p>
                </div>
            </div>
        </div>

    {% block javascripts %}
        <script>
            function updateScoreColor(score, totalQuestions) {
                const scoreElement = document.querySelector('.score-info');
                const quarterSize = totalQuestions / 4;
                
                if (score <= quarterSize) {
                    scoreElement.style.color = 'red';
                } else if (score <= quarterSize * 2) {
                    scoreElement.style.color = 'orange';
                } else if (score <= quarterSize * 3) {
                    scoreElement.style.color = 'green';
                } else {
                    scoreElement.style.color = '#00c04b';
                }
            }

            function updateProgressBar(currentQuestion, totalQuestions) {
                const progressBar = document.getElementById('progressBar');
                const percentage = (currentQuestion / totalQuestions) * 100;
                progressBar.style.width = `${percentage}%`;
                progressBar.setAttribute('aria-valuenow', currentQuestion);
            }

            document.addEventListener('DOMContentLoaded', function () {
                const buttons = document.querySelectorAll('.response-button');
                const idQuizz = {{ idQuizz }};
                const nextNumero = {{ question.numero + 1 }};
                const isLastQuestion = {{ isLastQuestion ? 'true' : 'false' }};
                const nbQuestions = {{ nbTotalQuestions }};
                const currentQuestion = {{ question.numero }};

                let score = sessionStorage.getItem('score') ? parseInt(sessionStorage.getItem('score')) : 0;

                if (nextNumero - 1 === 1) {
                    score = 0;
                    sessionStorage.setItem('score', score);
                }

                document.querySelector('.score-info').innerHTML = `Score actuel : <strong>${score} / ${nbQuestions}</strong>` ;
                updateScoreColor(score, nbQuestions); // Appel initial pour définir la couleur
                updateProgressBar(currentQuestion, nbQuestions); // Mettre à jour la barre de progression

                buttons.forEach(button => {
                    button.addEventListener('click', function () {
                        buttons.forEach(btn => btn.disabled = true);

                        if (button.getAttribute('data-correct') === 'true') {
                            button.classList.add('bg-success', 'text-white');
                            score++;
                            sessionStorage.setItem('score', score);
                            document.querySelector('.score-info').innerHTML = `Score actuel : <strong>${score} / ${nbQuestions}</strong>` ;
                            updateScoreColor(score, nbQuestions); // Mise à jour de la couleur après changement du score
                        } else {
                            button.classList.add('bg-danger', 'text-white');
                        }

                        const correctButton = Array.from(buttons).find(btn => btn.getAttribute('data-correct') === 'true');
                        correctButton.classList.add('bg-success', 'text-white');

                        // Afficher la flèche pour passer à la question suivante
                        document.getElementById('nextQuestionBtn').style.display = 'inline-block';
                    });
                });

                // Fonction pour passer à la question suivante
                document.getElementById('nextQuestionBtn').addEventListener('click', function () {
                    window.location.href = `index.php?controleur=question&methode=afficherQuestion&idQuizz=${idQuizz}&numero=${nextNumero}`;
                });
            });
        </script>
    {% endblock %}
{% endblock %}
