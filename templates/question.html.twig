{% extends "base_template.html.twig" %}

{% block content %}
<a href="javascript:history.back()" class="btn btn-primary mt-2 ms-2 ilFautPatienter">Retour</a>

    <div class="container py-5">
        <!-- Illustration -->
            <div class="row justify-content-center mb-4">
                <div class="col-12 col-md-8 d-flex justify-content-center">
                    {% if image is defined and image is not empty %}
                        <img src="img/quizz/{{ image }}" alt="Image affichée" class="img-fluid d-block mx-auto">
                    {% else %}
                        <img src="img/quizz/default.png" alt="Image par défaut" class="img-fluid d-block mx-auto">
                    {% endif %}
                </div>
            </div>

        <!-- Question -->
        <div class="row justify-content-center">
            <div class="col-12 col-md-8">
                <div class="text-center bg-danger text-white py-2 rounded">
                    <h4 id="questionText">{{ question.getContenu() }}</h4>
                </div>
            </div>
        </div>
        
        <!-- Affichage du score -->
        <div class="row justify-content-center mt-2">
            <div class="col-12 col-md-8 text-center">
                <p class="score-info" style="color: red;">Score actuel : <strong>{{ score }} / {{ nbTotalQuestions }}</strong></p>
            </div>
        </div>
        
        <!-- Difficulté -->
        <div class="row justify-content-center mb-2">
            <div class="col-12 col-md-8 text-center">
                <p id="difficultyLevel" style="margin-top: 0;">
                    Difficulté : <strong>{{ question.getNvDifficulte() }}</strong>
                    {% if question.getNvDifficulte() == 'Facile' %}
                        <style>#difficultyLevel { color: green; }</style>
                    {% elseif question.getNvDifficulte() == 'Moyen' %}
                        <style>#difficultyLevel { color: orange; }</style>
                    {% elseif question.getNvDifficulte() == 'Difficile' %}
                        <style>#difficultyLevel { color: red; }</style>
                    {% endif %}
                </p>
            </div>
        </div>

        <!-- Réponses -->
        <div class="row justify-content-center">
            <div class="col-12 col-md-8">
                <div class="row" id="answersContainer">
                    {% for reponse in reponses %}
                        <div class="col-6 mb-3">
                            <button class="btn btn-light w-100 py-2 border border-primary response-button" data-correct="{{ reponse == question.getBonneReponse() ? 'true' : 'false' }}">
                                {{ reponse }}
                            </button>
                        </div>
                    {% endfor %}
                </div>
            </div>
        </div>

        <!-- Barre de progression -->
        <div class="row justify-content-center mb-3">
            <div class="col-12 col-md-8 text-center">
                <div class="progress">
                    <div id="progressBar" class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 0%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="{{ nbTotalQuestions }}"></div>
                </div>
            </div>
        </div>

        <!-- Numéro de question et bouton suivant -->
        <div class="row justify-content-center mb-3">
            <div class="col-12 col-md-8 text-center position-relative">
                <p class="pb" style="font-size: 1.2rem; font-weight: bold; margin: 0;">
                    Question <span id="questionNumber">{{ question.numero }}</span> sur {{ nbTotalQuestions }}
                </p>
                <button id="nextQuestionBtn" class="btn position-absolute" style="display: none; font-size: 1.2rem; font-weight: bold; right: 0; top: 50%; transform: translateY(-50%); opacity: 0;">
                    →
                </button>
            </div>
        </div>

    {% block scripts %}
       <script>
document.addEventListener("DOMContentLoaded", function () {
    const buttons = document.querySelectorAll(".response-button");
    const idQuizz = {{ idQuizz }};
    let currentQuestion = {{ question.numero }};
    const nbQuestions = {{ nbTotalQuestions }};
    let score = sessionStorage.getItem("score") ? parseInt(sessionStorage.getItem("score")) : 0;

    if (currentQuestion === 1) {
        score = 0;
        sessionStorage.setItem("score", score);
    }

    function updateScoreDisplay() {
        document.querySelector(".score-info").innerHTML = `Score actuel : <strong>${score} / ${nbQuestions}</strong>`;
    }

    function updateProgressBar(currentQuestion, totalQuestions) {
        const progressBar = document.getElementById("progressBar");
        const percentage = (currentQuestion / totalQuestions) * 100;
        progressBar.style.width = `${percentage}%`;
        progressBar.setAttribute("aria-valuenow", currentQuestion);
    }

    function updateDifficultyLevel(difficulty) {
        const difficultyElement = document.getElementById("difficultyLevel");
        difficultyElement.innerHTML = `Difficulté : <strong>${difficulty}</strong>`;
    }

    function loadNextQuestion() {
        if (currentQuestion >= nbQuestions) {
            window.location.href = `index.php?controleur=question&methode=afficherScore&idQuizz=${idQuizz}`;
            return;
        }
        fetch(`index.php?controleur=question&methode=afficherQuestionAjax&idQuizz=${idQuizz}&numero=${currentQuestion + 1}`)
            .then(response => response.json())
            .then(data => {
                if (data.end) {
                    window.location.href = `index.php?controleur=question&methode=afficherScore&idQuizz=${idQuizz}`;
                    return;
                }

                currentQuestion++;
                document.getElementById("questionText").innerText = data.question;
                document.getElementById("questionNumber").innerText = currentQuestion;
                
                // Mise à jour du niveau de difficulté
                const difficultyElement = document.getElementById("difficultyLevel");
                difficultyElement.innerHTML = `Difficulté : <strong>${data.difficulty}</strong>`;

                // Changer la couleur en fonction de la difficulté
                difficultyElement.style.color = "";
                if (data.difficulty === "Facile") {
                    difficultyElement.style.color = "green";
                } else if (data.difficulty === "Moyen") {
                    difficultyElement.style.color = "orange";
                } else if (data.difficulty === "Difficile") {
                    difficultyElement.style.color = "red";
                }

                updateProgressBar(currentQuestion, nbQuestions);

                // Reconstruction complète du conteneur de réponses
                const answersContainer = document.getElementById("answersContainer");
                answersContainer.innerHTML = ''; // Vider le conteneur

                // Ajout des nouvelles réponses
                data.reponses.forEach(reponse => {
                    const col = document.createElement("div");
                    col.className = "col-6 mb-3";

                    const button = document.createElement("button");
                    button.className = "btn btn-light w-100 py-2 border border-primary response-button";
                    button.setAttribute("data-correct", reponse.correct);
                    button.textContent = reponse.text;
                    
                    // Ajouter l'écouteur d'événements directement
                    button.addEventListener("click", handleAnswerClick);

                    col.appendChild(button);
                    answersContainer.appendChild(col);
                });

                // Réinitialiser le bouton suivant
                const nextButton = document.getElementById("nextQuestionBtn");
                nextButton.style.display = "none";
                nextButton.style.opacity = "0";
            })
            .catch(error => console.error("Erreur:", error));
    }

    function handleAnswerClick(event) {
        const button = event.target;
        const isCorrect = button.getAttribute("data-correct") === "true";

        document.querySelectorAll(".response-button").forEach(btn => {
            btn.disabled = true;
            if (btn.getAttribute("data-correct") === "true") {
                btn.classList.add("bg-success", "text-white");
            } else if (btn === button && !isCorrect) {
                btn.classList.add("bg-danger", "text-white");
            }
        });

        if (isCorrect) {
            score++;
            sessionStorage.setItem("score", score);
            updateScoreDisplay();
        }

        document.getElementById("nextQuestionBtn").style.display = "inline-block";
        document.getElementById("nextQuestionBtn").style.opacity = "1";
    }

    buttons.forEach(button => button.addEventListener("click", handleAnswerClick));
    document.getElementById("nextQuestionBtn").addEventListener("click", loadNextQuestion);
});
</script>
    {% endblock %}
{% endblock %}
